import axios from "axios";
import { NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { useRef, useState, useEffect } from "react";
import Comment from "../../../components/Comment";
import CommunityWidget from "../../../components/CommunityWidget";
import Navbar from "../../../components/Navbar";
import Post from "../../../components/Post";
import { CommunityType } from "../../../types/community";
import { PostType } from "../../../types/post";

export const getServerSideProps = async (ctx: any) => {
  try {
    const [postRes, communitiesRes] = await Promise.all([
      axios.get(
        encodeURI(
          `${process.env.NEXTAUTH_URL}api/post?community=${ctx.query?.community}&_id=${ctx.query?.pid}`
        )
      ),
      axios.get(`${process.env.NEXTAUTH_URL}api/community`),
    ]);

    const community = communitiesRes.data.find(
      (x: any) => x.name === ctx.query?.community
    );

    if (!community || !postRes.data[0])
      return { redirect: { destination: "/" } };

    return {
      props: {
        post: postRes.data[0],
        communities: communitiesRes.data,
        community,
      },
    };
  } catch (error) {
    console.log(error);
    return { props: {}, redirect: { destination: "/" } };
  }
};

interface IProps {
  communities: CommunityType[];
  community: CommunityType;
  post: PostType;
}

const Community: NextPage<IProps> = ({ post, communities, community }) => {
  const { data: session } = useSession();
  const router = useRouter();
  const [comments, setComments] = useState<PostType["comments"]>();
  const commentRef = useRef<HTMLTextAreaElement>(null);

  const handleCommentPost = async () => {
    if (!post || !session) return;

    const content = commentRef?.current?.value;

    await axios.put(`/api/post?action=comment&_id=${post._id}`, {
      content,
    });

    router.reload();
  };

  useEffect(() => {
    setComments(post.comments);
  }, []);

  return (
    <div className="bg-black text-neutral-300 min-h-screen">
      <Head>
        <title>Reddit Clone</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar communities={communities} />

      <main className="max-w-5xl mx-auto p-4 grid grid-cols-3 gap-4">
        <section className="flex flex-col gap-4 col-span-3 lg:col-span-2">
          <Post key={post._id} post={post} />

          {session && (
            <div className="bg-neutral-900 rounded-md flex flex-col gap-4 p-4">
              <div className="border border-neutral-700 rounded-md w-full">
                <textarea
                  ref={commentRef}
                  placeholder="What are your thoughts?"
                  className="bg-transparent p-2 w-full min-h-[8rem]"
                />
              </div>

              <div className="flex justify-end">
                <button
                  onClick={handleCommentPost}
                  className="bg-gray-100 hover:bg-gray-300 py-1 px-4 rounded-full text-black font-semibold"
                >
                  Comment
                </button>
              </div>
            </div>
          )}

          <h1 className="py-4 mb-4 font-bold text-lg border-b border-neutral-700">
            Comments
          </h1>

          {comments?.length ? (
            <div className="bg-neutral-900 rounded-md flex flex-col gap-4 p-2">
              {comments.map((comment) => (
                <Comment key={comment._id} comment={comment} />
              ))}
            </div>
          ) : (
            <p className="text-neutral-500 text-lg text-center mb-4">
              There are no comments
            </p>
          )}
        </section>
        <section className="row-start-1 lg:row-start-auto col-span-3 lg:col-span-1">
          {community && <CommunityWidget community={community} />}
        </section>
      </main>
    </div>
  );
};

export default Community;
